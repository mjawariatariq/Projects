

import requests

# ‚úÖ Groq API key ‚Äî recommended to move this to .env in production
API_KEY = "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"
API_URL = "https://api.groq.com/openai/v1/chat/completions"
MODEL_NAME = "meta-llama/llama-4-scout-17b-16e-instruct"

# üß† Generate one section (Abstract, Intro, etc.)
def generate_section(prompt):
    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {API_KEY}"
        }

        data = {
            "model": MODEL_NAME,
            "messages": [
                {"role": "user", "content": prompt}
            ]
        }

        response = requests.post(API_URL, headers=headers, json=data)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"].strip()

    except Exception as e:
        return f"‚ùå Error from Groq API: {str(e)}"

# üß© Generate all detailed academic sections from a summary
def generate_detailed_sections_from_summary(summary):
    section_prompts = {
        "Abstract": f"Write an academic abstract:\n\n{summary}",
        "Introduction": f"Write an academic Introduction:\n\n{summary}",
        "Methodology": f"Write an academic Methodology based on:\n\n{summary}",
        "Findings / Results": f"Write the Findings or Results section:\n\n{summary}",
        "Discussion / Analysis": f"Write a Discussion and Analysis:\n\n{summary}",
        "Conclusion": f"Write a Conclusion section:\n\n{summary}",
    }

    sections = {}
    for section, prompt in section_prompts.items():
        sections[section] = generate_section(prompt)
    return sections

# üìù Format the final report
def generate_report(summary):
    return f"## Final Report\n\n{summary}\n\n---\n*Generated by Agentic Research Bot*"
# üìù Format the final report with sections
def generate_report_with_sections(sections):
    report = "## Final Report\n\n"
    for section, content in sections.items():
        report += f"### {section}\n\n{content}\n\n"
    report += "---\n*Generated by Agentic Research Bot*"
    return report

def summarize(pages, query):
    combined_text = " ".join([p["text"] for p in pages])
    prompt = f"""Research Topic: {query}

Summarize the following academic content into a formal 3‚Äì5 paragraph academic report:

{combined_text}
"""
    return generate_section(prompt)
def summarize_with_sections(pages, query):
    combined_text = " ".join([p["text"] for p in pages])
    prompt = f"""Research Topic: {query}
Summarize the following academic content into a formal 3‚Äì5 paragraph academic report with sections:
{combined_text}
"""
    sections = generate_detailed_sections_from_summary(prompt)
    return generate_report_with_sections(sections)
def summarize_with_sections_and_report(pages, query):
    combined_text = " ".join([p["text"] for p in pages])
    prompt = f"""Research Topic: {query}
Summarize the following academic content into a formal 3‚Äì5 paragraph academic report with sections:
{combined_text}
"""
    sections = generate_detailed_sections_from_summary(prompt)
    report = generate_report_with_sections(sections)
    return report

