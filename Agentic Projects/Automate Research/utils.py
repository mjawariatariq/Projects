import google.generativeai as genai
# Configure Gemini API key
genai.configure(api_key="AIzaSyDb6PdAABklifmNPsa4mP9mL-z1MkWPvqY")  # ✅ You can move this to main.py or .env for security

# List available Gemini models
def get_available_models():
    try:
        return [m.name for m in genai.list_models()]
    except Exception as e:
        print(f"❌ Error listing models: {e}")
        return []

# Generate a section (like Findings, Discussion) using best available Gemini model
def generate_section(prompt):
    try:
        model_names = [
            "models/gemini-2.5-pro",
            "models/gemini-1.5-pro",
            "models/gemini-1.5-flash"
        ]

        available_models = get_available_models()
        for name in model_names:
            if name in available_models:
                model = genai.GenerativeModel(name)
                response = model.generate_content(prompt)
                return response.text.strip()

        return "❌ No valid Gemini model found."
    except Exception as e:
        return f"❌ Error generating section: {str(e)[:200]}"

# Summarize all pages into a multi-paragraph report
def summarize(pages, query):
    try:
        model_names = [
            "models/gemini-2.5-pro",
            "models/gemini-1.5-pro",
            "models/gemini-1.5-flash"
        ]

        available_models = get_available_models()
        model = None
        for name in model_names:
            if name in available_models:
                model = genai.GenerativeModel(name)
                break

        if not model:
            return "❌ No compatible Gemini model found for summarization."

        combined_text = " ".join(p["text"] for p in pages)

        prompt = f"""Research topic: {query}

Summarize the following academic content from multiple sources:
{combined_text}

Provide a clear, 3–5 paragraph academic-style summary with references to major points.
"""

        response = model.generate_content(prompt)
        return response.text.strip()

    except Exception as e:
        print(f"❌ Summarization error: {e}")
        return f"❌ Summary generation failed. Error: {str(e)[:200]}"

# Optional post-processing
def generate_report(summary):
    return f"## Final Report\n\n{summary}\n\n---\n*Generated by Agentic Research Bot*"

# Generate all detailed academic sections from a summary
def generate_detailed_sections_from_summary(summary):
    section_prompts = {
        "Abstract": f"Based on the following report, write a formal academic abstract:\n\n{summary}",
        "Introduction": f"Based on the following report, write a professional academic Introduction:\n\n{summary}",
        "Methodology": f"Based on the summary below, write a detailed academic Methodology section describing how the research was done:\n\n{summary}",
        "Findings / Results": f"Write a full academic 'Findings / Results' section based on this report:\n\n{summary}",
        "Discussion / Analysis": f"Write a critical academic 'Discussion / Analysis' section based on this report:\n\n{summary}",
        "Conclusion": f"Write a thoughtful academic 'Conclusion' section summarizing the key impact of this report:\n\n{summary}",
    }

    generated_sections = {}
    for section, prompt in section_prompts.items():
        try:
            response = generate_section(prompt)
            generated_sections[section] = response
        except Exception as e:
            generated_sections[section] = f"⚠️ Error generating {section}: {e}"

    return generated_sections


