from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login
from django.contrib.auth.forms import AuthenticationForm
from .forms import SignupForm
from .models import Room, Message
from datetime import timedelta
from django.utils import timezone
from django.http import JsonResponse
from django.http import Http404

# Home view
def home(request):
    return render(request, 'home.html')

# Chat room view with session timeout

def chat_room_view(request, room_name):
    try:
        room = Room.objects.get(name=room_name)
    except Room.DoesNotExist:
        raise Http404("Room does not exist")
    
    messages = Message.objects.filter(room=room)
    context = {
        'room': room,
        'messages': messages,
        'room_name': room_name,
    }
    return render(request, 'chat_room.html', context)

# Group chat view to list all available rooms
def group(request):
    rooms = Room.objects.all()
    return render(request, 'group.html', {'rooms': rooms})

# Login view where users can authenticate
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        # Authenticate user
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('chat_room', room_name='ChatRoom')  # Replace 'ChatRoom' with the desired room name
        else:
            return render(request, 'login.html', {'error': 'Invalid credentials'})

    return render(request, 'login.html')

# Signup view for creating new users
def signup_view(request):
    if request.method == 'POST':
        form = SignupForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('login')  # Redirect to login page after successful signup
    else:
        form = SignupForm()

    return render(request, 'signup.html', {'form': form})

# Send message view
def send_message(request, room_name):
    if request.method == 'POST':
        message_content = request.POST.get('message')
        user = request.user  # Assuming the user is logged in
        room = Room.objects.get(name=room_name)
        message = Message.objects.create(room=room, user=user, content=message_content)
        return JsonResponse({'message': 'Message sent successfully'})
    return JsonResponse({'error': 'Invalid request'}, status=400)
