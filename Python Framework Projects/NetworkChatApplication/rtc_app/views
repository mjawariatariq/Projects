from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import authenticate, login
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse, HttpResponse
from .forms import SignupForm
from .models import Room, Message
from datetime import timedelta
from django.utils import timezone
from firebase_admin import messaging

def home(request):
    return render(request, 'home.html')

def chat_room_view(request, room_name):
    room = get_object_or_404(Room, name=room_name)
    messages = Message.objects.filter(room=room)
    context = {
        'room': room,
        'messages': messages,
        'room_name': room_name,
    }
    return render(request, 'chat_room.html', context)

def group(request):
    rooms = Room.objects.all()
    return render(request, 'group.html', {'rooms': rooms})

def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        # Authenticate user
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            next_url = request.GET.get('next', 'home')  # Default to home if no next URL
            return redirect(next_url)
        else:
            return render(request, 'login.html', {'error': 'Invalid credentials'})

    return render(request, 'login.html')


def signup_view(request):
    if request.method == 'POST':
        form = SignupForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('login')
    else:
        form = SignupForm()

    return render(request, 'signup.html', {'form': form})



@login_required
def send_message(request, room_name):
    if request.method == 'POST':
        content = request.POST.get('message')
        media = request.FILES.get('media')
        room = get_object_or_404(Room, name=room_name)

        # Ensure the user is authenticated before proceeding
        if request.user.is_authenticated:
            message = Message.objects.create(
                room=room,
                user=request.user,  # This ensures the user is a valid authenticated User instance
                content=content,
                media=media,
            )
            # Return JSON response indicating success
            return JsonResponse({'status': 'Message sent'})
        else:
            # If the user is not authenticated, return an error response
            return JsonResponse({'error': 'User is not authenticated'}, status=401)
    return JsonResponse({'error': 'Invalid request'}, status=400)

def update_message_status(request, message_id, status):
    message = get_object_or_404(Message, id=message_id)
    message.status = status
    message.save()
    return JsonResponse({'status': 'updated'})

def send_push_notification(user, title, body):
    if not hasattr(user, 'device_token') or not user.device_token:
        return JsonResponse({'error': 'User does not have a device token'}, status=400)

    message = messaging.Message(
        notification=messaging.Notification(
            title=title,
            body=body,
        ),
        token=user.device_token,
    )
    response = messaging.send(message)
    return response

def update_user_status(request, status):
    request.user.is_online = (status == "online")
    request.user.save()
    return JsonResponse({'status': 'updated'})
